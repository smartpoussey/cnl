# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Create synthetic data for demonstration
np.random.seed(0)
mean = [0, 0]
cov = [[1, 0.8], [0.8, 1]]
X = np.random.multivariate_normal(mean, cov, 100)

# Standardize the data (mean=0, variance=1)
scaler = StandardScaler()
X_std = scaler.fit_transform(X)

# Initialize PCA with the number of components you want
num_components = 2  # You can choose the number of components you desire
pca = PCA(n_components=num_components)

# Fit PCA to the standardized data
X_pca = pca.fit_transform(X_std)

# Create a DataFrame with the PCA results
pca_df = pd.DataFrame(data=X_pca, columns=['PCA1', 'PCA2'])

# Plot the PCA components
plt.figure(figsize=(8, 6))
plt.scatter(pca_df['PCA1'], pca_df['PCA2'])
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Result')
plt.grid(True)
plt.show()

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load the dataset from a CSV file
dataset = pd.read_csv('your_dataset.csv')

# Split the dataset into features (X) and the target variable (y)
X = dataset.drop('target_column', axis=1)  # Replace 'target_column' with the name of your target variable
y = dataset['target_column']

# Split the dataset into a training set (70%) and a test set (30%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the Decision Tree classifier
model = DecisionTreeClassifier()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy of the Decision Tree model: {accuracy * 100:.2f}%')

